pipeline {
    agent any
    environment {
        dockerImageName = 'django_from_jenkins'
        artifact_registry_image="me-west1-docker.pkg.dev/devconnect-project/shira-shani-artifacts/devconnect:v2.0.0"
    }
    stages {
        stage('Build') {
            steps {
                echo 'Building the Docker image'
                dir('django_web_app') {
                    sh 'docker build -t django_from_jenkins .'
                }
            }
        }

        stage('Testing the app') {
            steps {
                echo 'Running Django tests'
                sh 'docker run --name django_container3 -d -p 5033:8000 django_from_jenkins '
                // Run the Django tests
                dir('django_web_app') {
                    sh 'docker exec django_container3 python manage.py test'
                }

                // Check for a 200 (OK) response when trying to access the app using curl
                // script {
                //     def responseCode = sh(script: 'curl -s -o /dev/null -w "%{http_code}" http://localhost:5025/', returnStatus: true).toString().trim()
                //     if (responseCode == '200') {
                //         echo 'App is accessible. Proceeding to the next stage.'
                //     } else {
                //         error "App is not accessible. Received HTTP response code: ${responseCode}"
                //     }
                // }
            }
        }
         stage('Push to Artifact Registry') {
            steps {
                echo 'Pushing the Docker image to Artifact Registry'
                sh "docker tag $dockerImageName $artifact_registry_image"
                sh "docker push $artifact_registry_image"
            }
        }

        stage('Deploy') {
            steps {
                echo 'Deploying...'
                // Add deployment steps here
            }
        }
    }

    post {
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
