pipeline {
    agent any
    environment {
        dockerImageName = 'django_from_jenkins'
        artifactRegistryImage = "me-west1-docker.pkg.dev/devconnect-project/shira-shani-artifacts/devconnect"
        containerName = "django_container"
    }
    triggers {
        pollSCM('*/10 * * * *')
    }
    stages {
        stage('Build') {
            steps {
                echo 'Building the Docker image'
                dir('django_web_app') {
                    script {
                        sh "docker build -t $dockerImageName ."
                    }
                }
            }
        }

        stage('Testing the app') {
            steps {
                echo 'Running Django tests'
                script {
                    sh "docker stop $containerName || true"
                    sh "docker rm $containerName || true"
                    sh "docker run --name $containerName -d -p 5035:8000 $dockerImageName"
                    // Run the Django tests
                    dir('django_web_app') {
                        sh "docker exec $containerName python manage.py test"
                    }
                    def httpResponse = sh(script: 'curl -s -o /dev/null -w %{http_code} http://localhost:5035/', returnStatus: true).trim()
                    if (httpResponse == '200') {
                        echo 'Tests passed and app is accessible!'
                    } else {
                        error 'Tests failed or app is not accessible!'
                    }
                }
            }
        }

        stage('Push to Artifact Registry') {
            steps {
                echo 'Pushing the Docker image to Artifact Registry'
                script {
                    def commitMessage = sh(script: 'git log -1 --pretty=%B', returnStdout: true).trim()
                    sh "docker tag $dockerImageName $artifactRegistryImage:$commitMessage"
                    sh "docker push $artifactRegistryImage:$commitMessage"
                }
            }
        }

        stage('Deploy') {
            steps {
                echo 'Deploying...'
                // Add deployment steps here
                // This stage is currently empty. Add deployment steps as per your deployment process.
            }
        }
    }

    post {
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed! :('
        }
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '3'))
    }
}
